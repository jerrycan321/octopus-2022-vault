step "Create tenant namespace" {
    properties = {
        Octopus.Action.TargetRoles = "k8s"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                TENANT=`echo $(get_octopusvariable "Octopus.Deployment.Tenant.Name") | tr [A-Z] [a-z]`
                ENVIRONMENT=`echo $(get_octopusvariable "Octopus.Environment.Name") | tr [A-Z [a-z]`
                NAMESPACE=${TENANT}-${ENVIRONMENT}
                echo "Creating Namespace  ${NAMESPACE}"
                kubectl create namespace ${NAMESPACE}
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool_variable = ""
    }
}

step "Upgrade a Helm Chart" {
    properties = {
        Octopus.Action.TargetRoles = "k8s"
    }

    action {
        action_type = "Octopus.HelmChartUpgrade"
        is_required = true
        properties = {
            Octopus.Action.Helm.ClientVersion = "V3"
            Octopus.Action.Helm.Namespace = "#{Octopus.Deployment.Tenant.Name}-#{Octopus.Environment.Name}"
            Octopus.Action.Helm.ReleaseName = "#{Octopus.Deployment.Tenant.Name}-#{Octopus.Environment.Name}"
            Octopus.Action.Helm.ResetValues = "True"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "Helm Hashicorp"
            Octopus.Action.Package.PackageId = "vault"
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "Helm Hashicorp"
            package_id = "vault"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}